symbols :
- symbol :
    name : dm_schema_version
    #  Names of some fields vary, depending on dm schema version
    default : 3
    allowed : [1, 2, 3]
    usage : single
- symbol :
    name : flux
    default : instflux
    allowed : [nil, flux, flux, instflux]
    usage :   {index_by : dm_schema_version}
- symbol:
    name : err
    default : err
    allowed : [nil, schema, err, err]
    usage :  {index_by : dm_schema_version}
ignores :
-  'base_Circular.*'
-  'base_Gaussian.*'
-  'ext_photometry.*'
-  'base_Transformed.*'
-  'base_PsfFlux_apCorr.*'
-  'base_PsfFlux_flag_apCorr.*'
-  'parent'
-  'parentObjectId' 
-  'deblend_nChild'
-  'coord_ra' 
-  'coord_dec'
-  'base_SdssCentroid.*'
-  'base_SdssShape.*'

tables :
- table :
    name : ForcedSource_native
    source : forced
    columns : 
      - column :
          name : objectId
          dtype: bigint
      - column :
          name : ccdVisitId
          dtype:  bigint
          #source : infilename # i.e. will be derived from data file name
          compute : [concat_fields : decimal, raft: 2, sensor: 2, visit: 8]
          doc : 'Identifies visit, ccd for associated data'
      - column_group :
          name_re : 'base_PsfFlux_inst.*'
          dtype : float
      - column_group :
          name_re : 'base_PsfFlux_flag.*'
          dtype : flag
      - column_group :
          name_re : 'base_Pixel_flag.*'
    constraints :
      - fk : {column : ccdVisitId, table : CcdVisit, refColumn : ccdVisitId}
      - fk : {column : objectId, table : position, refColumn : object_id}
      - unique : [ccdVisitId, objectId]

      
#  Somewhere there also needs to be config information for the structure
#  of infilename.   
#  A typical one for forced source is
#   forced_01198591-z-R10-S11-det031.fits, i.e.
#   forced_<visitid>-<filter>-<raftname>-<detectorName>-det<det#>.fits
# re for this could be 
# 'forced_([0-9]{8})-([ugriyz])-(R[0-9]{2})-(S[0-2]{2})-det[0-9]{3}.fits'
# Then the value of the matched groups are, in order,
# visit id, filter, raft name, and detector name. Or use group names:
# 'forced_(?P<visit>[0-9]{8})-(?P<filter>[ugriyz])-(?P<raft>R[0-9]{2})-(?P<det>S[0-2]{2})-det[0-9]{3}.fits'
# Then use re.fullmatch(pat, fname)
# Or don't bother defining in full detail beyond the last group, e.g.
#  'forced_(?P<visit>[0-9]{8})-(?P<filter>[ugriyz])-(?P<raft>R[0-9]{2})-(?P<det>S[0-2]{2}).*fits'
# or even
# 'forced_(?P<visit>[0-9]{8})-(?P<filter>[ugriyz])-(?P<raft>R[0-9]{2})-(?P<det>S[0-2]{2})'
# and use re.match(pat,fname)
# Jim's visit ingest code is expecting no more than 7, which is ok for
# 1.2p v4.  I've changed it to 8 to match template for infile names
